# -*- coding: utf-8 -*-
"""Task 1: Simple Linear Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DrvIorLt0UogCASH0TcPywh7mvEASuRy

# Data Science and Business Analytics Intern
---
GRIP at The Sparks Foundation

---
Intern Name : Siddhi Sanjay Lad

---
Task 1 : Prediction using Supervised Machine Learning 

---
*It is a simple reggression task which involves 2 variables and we have to predict the percentage of a student based on the number of study hours.*

---

### Step 1 - To import the required libraries.

---
"""

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split 
import matplotlib.pyplot as plt
import numpy as np 
import pandas as pd

"""---

### Step 2 - To import and read the data from the source.
---
"""

url = r"http://bit.ly/w-data"
dt = pd.read_csv(url)
print("Data is successful imported!")

dt.head()

dt.describe()

"""---

### Step 3 - To visualize the data to get a better understanding of the data by plotting a graph.

---
"""

dt.plot(x='Hours', y='Scores', style='o')  
plt.title('Number of hours vs Percentage score')  
plt.xlabel('Number of hours')  
plt.ylabel('Percentage score')  
plt.show()

"""**From the above graph it is evident that there is a positive linear relation between the number of hours studied and percentage of score.**

---

### Step 4 - Division of data into attributes and labels, thus also known as data preprocessing.
---
"""

X = dt.iloc[:, :-1].values
y = dt.iloc[:, 1].values

"""---

### Step 5 - To train the model we are splitting the data into training and testing sets.
---
"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0) 
regressor = LinearRegression()  
regressor.fit(X_train.reshape(-1,1), y_train) 

print("Model training is complete.")

"""---

### Step 6 - To visualize the best-fit line of regression by plotting it.
---
"""

ln = regressor.coef_*X + regressor.intercept_

plt.scatter(X, y)
plt.title('Number of hours vs Percentage score') 
plt.xlabel('Number of hours')  
plt.ylabel('Percentage score')  
plt.plot(X, ln, color = 'yellow');
plt.show()

"""---

### Step 7 - To test the trained model by making some predictions.
#### *It is done with the help of test-set data and our trained algorithm.*
---
"""

print(X_test)
y_pred = regressor.predict(X_test)

"""---

### Step 8 - We now compare the actual results with the predicted model results.

---
"""

df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred}) 
df

"""---

### Step 9 - Evaluating the test and training score.

---
"""

print("Training Score:",regressor.score(X_train,y_train))
print("Test Score:",regressor.score(X_test,y_test))

"""---

### Step 10 - For better understainding we plot a Bar graph to depict the difference between the actual and predicted value.

---
"""

df.plot(kind='bar',figsize=(9,9))
plt.grid(which='major', linewidth='1', color='red')
plt.grid(which='minor', linewidth='1', color='green')
plt.show()

"""---

### Step 11 - Testing the model with our question.
##### *Question: What will be predicted score if a student studies for 9.25 hrs / day?*

---
"""

hours = 9.25
test = np.array([hours])
test = test.reshape(-1, 1)
own_pred = regressor.predict(test)
print("Number of Hours is {}".format(hours))
print("Predicted Score is {}".format(own_pred[0]))

"""---

### Step 12 - Model Evaluation.

---
"""

from sklearn import metrics  
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred)) 
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))
print('R - 2:', metrics.r2_score(y_test, y_pred))

"""---
### R - 2 gives the score of model fit and in our case we have R - 2 = 0.9568211104435257.

---
## Conclusion

### I could successfully carry-out the task of Prediction using Supervised Machine Learning task and was able to estimate the model's performance.
---
## Thank You!
---

"""